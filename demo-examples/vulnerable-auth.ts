/**
 * Demo Example: Incomplete/Weak Authentication
 *
 * This file demonstrates incomplete or weak authentication patterns
 * often generated by AI assistants
 */

import express from 'express';
import jwt from 'jsonwebtoken';

const app = express();

// VULNERABLE: Missing authentication entirely
app.get('/admin/users', (req, res) => {
  // TODO: Add authentication
  // This is a common AI-generated placeholder that never gets implemented
  res.json({ users: ['admin', 'user1', 'user2'] });
});

// VULNERABLE: Weak password validation
app.post('/register', (req, res) => {
  const { username, password } = req.body;

  // No password strength requirements
  if (password.length < 3) {
    return res.status(400).json({ error: 'Password too short' });
  }

  // Missing: uppercase, numbers, special chars requirements
  // Missing: common password check
  // Missing: password hashing before storage

  res.json({ message: 'User registered' });
});

// VULNERABLE: Insecure JWT implementation
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Simplified check - AI often generates this without proper validation
  if (username && password) {
    // VULNERABLE: Using hardcoded secret (see vulnerable-secrets.ts)
    const token = jwt.sign({ username }, 'my-super-secret-key', {
      expiresIn: '1h',
    });

    res.json({ token });
  } else {
    res.status(401).json({ error: 'Invalid credentials' });
  }
});

// VULNERABLE: Missing rate limiting
app.post('/api/login', (req, res) => {
  // No rate limiting allows brute force attacks
  // AI often forgets to add this protection
  const { username, password } = req.body;

  // Authenticate user...
  res.json({ success: true });
});

// VULNERABLE: Insecure password reset
app.post('/reset-password', (req, res) => {
  const { email, newPassword } = req.body;

  // Missing: Email verification
  // Missing: Token validation
  // Missing: Current password check
  // Just accepts the new password!

  res.json({ message: 'Password reset successful' });
});

// VULNERABLE: Session management issues
app.get('/dashboard', (req, res) => {
  // Checking cookie directly without validation
  const sessionId = req.cookies.session;

  if (sessionId) {
    // VULNERABLE: No session validation, expiration, or CSRF protection
    res.json({ data: 'sensitive dashboard data' });
  } else {
    res.status(401).json({ error: 'Not authenticated' });
  }
});

// VULNERABLE: Authorization bypass
app.delete('/users/:id', (req, res) => {
  const userId = req.params.id;
  const currentUser = (req as any).user;

  // Missing: Check if user can delete this specific user
  // Missing: Admin role check
  // AI often generates simplified auth that doesn't handle authorization properly

  res.json({ message: `User ${userId} deleted` });
});

export default app;

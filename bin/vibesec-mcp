#!/usr/bin/env bun
/**
 * VibeSec MCP Server Entry Point
 *
 * Starts the Model Context Protocol server for AI assistant integration
 * Usage: vibesec-mcp
 */

import { MCPServer } from '../src/mcp/server';
import { StdioTransport } from '../src/mcp/transport/stdio';
import { initSentryFromEnv, sentry } from '../src/observability/integrations/sentry';
import { Logger } from '../src/observability/logger';

// Initialize observability
try {
  if (process.env.SENTRY_DSN) {
    initSentryFromEnv();
  }
} catch (error) {
  console.error('Failed to initialize Sentry:', error);
}

const logger = new Logger('vibesec-mcp');

async function main() {
  try {
    logger.info('Initializing VibeSec MCP Server');

    // Create transport
    const transport = new StdioTransport();

    // Create server configuration
    const config = {
      name: 'vibesec',
      version: process.env.VIBESEC_VERSION || '1.0.0',
      capabilities: ['tools' as const],
      description: 'VibeSec security scanner - AI-native vulnerability detection'
    };

    // Create server
    const server = new MCPServer(config, transport);

    // Register Phase 2 tools
    logger.info('Registering tools...');

    // Import tools
    const { vibesecScanTool } = await import('../src/mcp/tools/scan');
    const { vibesecListRulesTool } = await import('../src/mcp/tools/list-rules');

    // Register tools
    server.registerTool(vibesecScanTool);
    server.registerTool(vibesecListRulesTool);

    logger.info('Registered 2 tools: vibesec_scan, vibesec_list_rules');

    // Start server
    logger.info('Starting MCP server');
    await server.start();

  } catch (error) {
    logger.error('Failed to start MCP server', {}, error as Error);

    if (sentry) {
      sentry.captureError(
        error as Error,
        'SYSTEM_ERROR' as any,
        { component: 'mcp-server-startup' }
      );
      await sentry.close(2000);
    }

    process.exit(1);
  }
}

// Start the server
main().catch((error) => {
  console.error('Fatal error:', error);
  process.exit(1);
});
